"""Add updated_at column to quiz_result

Revision ID: 2e115e6d2053
Revises: 
Create Date: 2025-09-13 09:12:32.989770

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '2e115e6d2053'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Check if the updated_at column already exists
    conn = op.get_bind()
    inspector = sa.inspect(conn)
    columns = [col['name'] for col in inspector.get_columns('quiz_result')]
    
    with op.batch_alter_table('quiz_result', schema=None) as batch_op:
        # Only add column if it doesn't already exist
        if 'updated_at' not in columns:
            batch_op.add_column(sa.Column('updated_at', sa.DateTime(), nullable=True))
            print("✅ Added updated_at column to quiz_result table")
        else:
            print("ℹ️ updated_at column already exists in quiz_result table, skipping")
        
        # Check if constraint already exists before creating it
        constraints = [con['name'] for con in inspector.get_unique_constraints('quiz_result')]
        if 'unique_user_challenge_result' not in constraints:
            batch_op.create_unique_constraint('unique_user_challenge_result', ['user_id', 'challenge_id'])
            print("✅ Added unique constraint to quiz_result table")
        else:
            print("ℹ️ unique constraint already exists in quiz_result table, skipping")

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    conn = op.get_bind()
    inspector = sa.inspect(conn)
    columns = [col['name'] for col in inspector.get_columns('quiz_result')]
    constraints = [con['name'] for con in inspector.get_unique_constraints('quiz_result')]

    with op.batch_alter_table('quiz_result', schema=None) as batch_op:
        if 'unique_user_challenge_result' in constraints:
            batch_op.drop_constraint('unique_user_challenge_result', type_='unique')
        if 'updated_at' in columns:
            batch_op.drop_column('updated_at')

    # ### end Alembic commands ###
